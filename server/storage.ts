import { 
  users, type User, type InsertUser,
  categories, type Category, type InsertCategory,
  snippets, type Snippet, type InsertSnippet
} from "@shared/schema";

export interface IStorage {
  // User methods
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Category methods
  getAllCategories(): Promise<Category[]>;
  getCategoryBySlug(slug: string): Promise<Category | undefined>;
  createCategory(category: InsertCategory): Promise<Category>;
  
  // Snippet methods
  getAllSnippets(): Promise<Snippet[]>;
  getSnippetById(id: number): Promise<Snippet | undefined>;
  getSnippetsByCategory(categoryId: number): Promise<Snippet[]>;
  createSnippet(snippet: InsertSnippet): Promise<Snippet>;
  updateSnippetViewCount(id: number): Promise<Snippet | undefined>;
  searchSnippets(query: string): Promise<Snippet[]>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private categories: Map<number, Category>;
  private snippets: Map<number, Snippet>;
  private currentUserId: number;
  private currentCategoryId: number;
  private currentSnippetId: number;

  constructor() {
    this.users = new Map();
    this.categories = new Map();
    this.snippets = new Map();
    this.currentUserId = 1;
    this.currentCategoryId = 1;
    this.currentSnippetId = 1;
    
    // Initialize with sample data
    this.initializeSampleData();
  }

  // User methods
  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByUsername(username: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(
      (user) => user.username === username
    );
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentUserId++;
    const user: User = { ...insertUser, id };
    this.users.set(id, user);
    return user;
  }

  // Category methods
  async getAllCategories(): Promise<Category[]> {
    return Array.from(this.categories.values());
  }

  async getCategoryBySlug(slug: string): Promise<Category | undefined> {
    return Array.from(this.categories.values()).find(
      (category) => category.slug === slug
    );
  }

  async createCategory(insertCategory: InsertCategory): Promise<Category> {
    const id = this.currentCategoryId++;
    const category: Category = { ...insertCategory, id };
    this.categories.set(id, category);
    return category;
  }

  // Snippet methods
  async getAllSnippets(): Promise<Snippet[]> {
    return Array.from(this.snippets.values());
  }

  async getSnippetById(id: number): Promise<Snippet | undefined> {
    return this.snippets.get(id);
  }

  async getSnippetsByCategory(categoryId: number): Promise<Snippet[]> {
    return Array.from(this.snippets.values()).filter(
      (snippet) => snippet.categoryId === categoryId
    );
  }

  async createSnippet(insertSnippet: InsertSnippet): Promise<Snippet> {
    const id = this.currentSnippetId++;
    const snippet: Snippet = { 
      ...insertSnippet, 
      id, 
      updatedAt: new Date(),
      viewCount: 0
    };
    this.snippets.set(id, snippet);
    return snippet;
  }

  async updateSnippetViewCount(id: number): Promise<Snippet | undefined> {
    const snippet = this.snippets.get(id);
    if (!snippet) return undefined;
    
    const updatedSnippet = {
      ...snippet,
      viewCount: snippet.viewCount + 1
    };
    
    this.snippets.set(id, updatedSnippet);
    return updatedSnippet;
  }

  async searchSnippets(query: string): Promise<Snippet[]> {
    const lowerQuery = query.toLowerCase();
    return Array.from(this.snippets.values()).filter(snippet => 
      snippet.title.toLowerCase().includes(lowerQuery) || 
      snippet.description.toLowerCase().includes(lowerQuery) ||
      (snippet.tags && snippet.tags.some(tag => tag.toLowerCase().includes(lowerQuery)))
    );
  }

  // Initialize with sample data
  private initializeSampleData() {
    // Create categories
    const categories: InsertCategory[] = [
      { name: "Product Pages", slug: "product-pages" },
      { name: "Collections", slug: "collections" },
      { name: "Cart Functionality", slug: "cart-functionality" },
      { name: "Customer Accounts", slug: "customer-accounts" },
      { name: "Checkout Customization", slug: "checkout-customization" },
      { name: "Analytics", slug: "analytics" }
    ];
    
    categories.forEach(category => {
      this.createCategory(category);
    });

    // Create snippets
    const snippets: InsertSnippet[] = [
      {
        title: "Add to Cart Button Enhancement",
        description: "This snippet enhances your product's \"Add to Cart\" button with animation, stock status, and adds an item to cart without page refresh.",
        html: "<button class=\"add-to-cart-button w-full bg-blue-600 hover:bg-blue-700 text-white py-3 px-4 rounded-md font-medium transition-colors\">\n  Add to Cart\n</button>",
        css: ".add-to-cart-button {\n  transition: all 0.3s ease;\n}\n\n.add-to-cart-button.is-loading {\n  background-color: #4a90e2;\n  opacity: 0.8;\n}\n\n.add-to-cart-button.is-success {\n  background-color: #34c759;\n}\n\n.add-to-cart-button.is-error {\n  background-color: #ff3b30;\n}\n\n.loading-spinner {\n  display: inline-block;\n  width: 1em;\n  height: 1em;\n  border: 2px solid rgba(255,255,255,0.3);\n  border-radius: 50%;\n  border-top-color: white;\n  animation: spin 0.8s linear infinite;\n  margin-right: 0.5rem;\n}\n\n@keyframes spin {\n  to { transform: rotate(360deg); }\n}\n\n.cart-count {\n  position: relative;\n}\n\n.cart-count-updated {\n  animation: pulse 1s;\n}\n\n@keyframes pulse {\n  0% { transform: scale(1); }\n  50% { transform: scale(1.5); }\n  100% { transform: scale(1); }\n}\n\n.quick-cart {\n  position: fixed;\n  top: 80px;\n  right: 20px;\n  width: 320px;\n  max-width: 90vw;\n  background: white;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n  z-index: 1000;\n  transform: translateY(-20px);\n  opacity: 0;\n  visibility: hidden;\n  transition: all 0.3s ease;\n}\n\n.quick-cart.is-active {\n  transform: translateY(0);\n  opacity: 1;\n  visibility: visible;\n}\n\n.quick-cart-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  border-bottom: 1px solid #eee;\n}\n\n.quick-cart-products {\n  max-height: 300px;\n  overflow-y: auto;\n}\n\n.quick-cart-item {\n  display: flex;\n  padding: 10px 15px;\n  border-bottom: 1px solid #eee;\n}\n\n.quick-cart-item img {\n  width: 60px;\n  height: 60px;\n  object-fit: cover;\n  margin-right: 10px;\n}\n\n.quick-cart-footer {\n  padding: 15px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.view-cart-button, .checkout-button {\n  padding: 8px 16px;\n  border-radius: 4px;\n  font-weight: 500;\n  text-align: center;\n  font-size: 14px;\n}\n\n.view-cart-button {\n  border: 1px solid #ddd;\n  color: #333;\n}\n\n.checkout-button {\n  background: #4a90e2;\n  color: white;\n}",
        javascript: "/**\n * Enhanced Add to Cart Button\n * \n * Features:\n * - Adds products to cart without page refresh\n * - Shows loading state during AJAX request\n * - Displays success/error messages\n * - Updates mini cart count\n * \n * Installation: Add to your product template\n */\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const addToCartButtons = document.querySelectorAll('.add-to-cart-button');\n  \n  addToCartButtons.forEach(button => {\n    button.addEventListener('click', function(event) {\n      event.preventDefault();\n      \n      const form = this.closest('form');\n      const formData = new FormData(form);\n      const productId = this.dataset.productId;\n      const quantity = form.querySelector('[name=\"quantity\"]').value;\n      \n      // Change button state to loading\n      const originalText = this.innerHTML;\n      this.innerHTML = '<span class=\"loading-spinner\"></span> Adding...';\n      this.classList.add('is-loading');\n      this.disabled = true;\n      \n      // Add to cart AJAX request\n      fetch('/cart/add.js', {\n        method: 'POST',\n        body: formData,\n        credentials: 'same-origin',\n        headers: {\n          'X-Requested-With': 'XMLHttpRequest'\n        }\n      })\n      .then(response => response.json())\n      .then(data => {\n        // Success! Update mini cart\n        updateMiniCart();\n        \n        // Change button to success state\n        this.innerHTML = '<svg class=\"check-icon\" viewBox=\"0 0 24 24\"><path d=\"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41L9 16.17z\"></path></svg> Added!';\n        this.classList.remove('is-loading');\n        this.classList.add('is-success');\n        \n        // Show the quick cart view\n        showQuickCart(data);\n        \n        // Reset button after 2 seconds\n        setTimeout(() => {\n          this.innerHTML = originalText;\n          this.classList.remove('is-success');\n          this.disabled = false;\n        }, 2000);\n      })\n      .catch(error => {\n        // Handle error\n        console.error('Error:', error);\n        this.innerHTML = 'Error! Try again';\n        this.classList.remove('is-loading');\n        this.classList.add('is-error');\n        \n        // Reset button after 2 seconds\n        setTimeout(() => {\n          this.innerHTML = originalText;\n          this.classList.remove('is-error');\n          this.disabled = false;\n        }, 2000);\n      });\n    });\n  });\n  \n  // Function to update mini cart\n  function updateMiniCart() {\n    fetch('/cart.js')\n      .then(response => response.json())\n      .then(cart => {\n        const cartCountElements = document.querySelectorAll('.cart-count');\n        cartCountElements.forEach(element => {\n          element.textContent = cart.item_count;\n          \n          // Add animation\n          element.classList.add('cart-count-updated');\n          setTimeout(() => {\n            element.classList.remove('cart-count-updated');\n          }, 1000);\n        });\n      });\n  }\n  \n  // Function to show quick cart\n  function showQuickCart(product) {\n    // Create or show your quick cart view\n    const quickCart = document.querySelector('.quick-cart') || createQuickCart();\n    \n    // Add product to quick cart view\n    const productHTML = `\n      <div class=\"quick-cart-item\" data-product-id=\"${product.id}\">\n        <img src=\"${product.image || ''}\" alt=\"${product.product_title}\" width=\"60\" height=\"60\">\n        <div class=\"quick-cart-item-details\">\n          <p class=\"quick-cart-item-title\">${product.product_title}</p>\n          <p class=\"quick-cart-item-price\">${formatMoney(product.price)}</p>\n          <div class=\"quick-cart-item-quantity\">\n            Qty: ${product.quantity}\n          </div>\n        </div>\n      </div>\n    `;\n    \n    const productsContainer = quickCart.querySelector('.quick-cart-products');\n    productsContainer.insertAdjacentHTML('afterbegin', productHTML);\n    \n    // Show quick cart\n    quickCart.classList.add('is-active');\n    \n    // Auto-hide after 5 seconds\n    setTimeout(() => {\n      quickCart.classList.remove('is-active');\n    }, 5000);\n  }\n  \n  // Create quick cart if it doesn't exist\n  function createQuickCart() {\n    const quickCartHTML = `\n      <div class=\"quick-cart\">\n        <div class=\"quick-cart-header\">\n          <h3>Added to Cart</h3>\n          <button class=\"quick-cart-close\">×</button>\n        </div>\n        <div class=\"quick-cart-products\"></div>\n        <div class=\"quick-cart-footer\">\n          <a href=\"/cart\" class=\"view-cart-button\">View Cart</a>\n          <a href=\"/checkout\" class=\"checkout-button\">Checkout</a>\n        </div>\n      </div>\n    `;\n    \n    document.body.insertAdjacentHTML('beforeend', quickCartHTML);\n    \n    const quickCart = document.querySelector('.quick-cart');\n    const closeButton = quickCart.querySelector('.quick-cart-close');\n    \n    closeButton.addEventListener('click', () => {\n      quickCart.classList.remove('is-active');\n    });\n    \n    return quickCart;\n  }\n  \n  // Helper function to format money\n  function formatMoney(cents) {\n    return '$' + (cents / 100).toFixed(2);\n  }\n});",
        installation: "<ol class=\"list-decimal list-inside space-y-2\">\n  <li>Copy the JavaScript code above</li>\n  <li>In your Shopify admin, go to <strong>Online Store > Themes</strong></li>\n  <li>Click <strong>Actions > Edit code</strong> for your current theme</li>\n  <li>In the Assets folder, create a new file called <strong>product-button.js</strong></li>\n  <li>Paste the code into the file and save</li>\n  <li>In your theme.liquid file, add this line before the closing &lt;/body&gt; tag:\n    <pre class=\"mt-2 p-2 bg-white border border-gray-200 rounded text-sm font-mono\">&lt;script src=\"{{ 'product-button.js' | asset_url }}\" defer=\"defer\"&gt;&lt;/script&gt;</pre>\n  </li>\n  <li>Make sure your Add to Cart buttons have the class <strong>add-to-cart-button</strong></li>\n</ol>",
        howItWorks: "<p class=\"mb-4\">\n  This snippet enhances your Shopify store's Add to Cart functionality by:\n</p>\n<ul class=\"list-disc list-inside space-y-2 mb-6\">\n  <li>Adding products to cart without refreshing the page using AJAX</li>\n  <li>Showing loading, success, and error states on the button</li>\n  <li>Displaying a quick cart preview after adding an item</li>\n  <li>Animating the cart icon count when items are added</li>\n</ul>\n\n<div class=\"bg-blue-50 border-l-4 border-blue-500 p-4 rounded-md\">\n  <div class=\"flex\">\n    <div class=\"flex-shrink-0\">\n      <svg class=\"h-5 w-5 text-blue-500\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n        <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2h-1V9z\" clip-rule=\"evenodd\" />\n      </svg>\n    </div>\n    <div class=\"ml-3\">\n      <h3 class=\"text-sm font-medium text-blue-800\">Pro Tip</h3>\n      <div class=\"mt-2 text-sm text-blue-700\">\n        <p>\n          Customize the appearance of the button states by adding CSS styles for <code class=\"px-1 py-0.5 bg-blue-100 rounded text-xs\">.is-loading</code>, <code class=\"px-1 py-0.5 bg-blue-100 rounded text-xs\">.is-success</code>, and <code class=\"px-1 py-0.5 bg-blue-100 rounded text-xs\">.is-error</code> classes. \n        </p>\n      </div>\n    </div>\n  </div>\n</div>",
        categoryId: 1,
        tags: ["Product Page", "Ajax", "Animation"],
        compatibility: "Shopify 2.0+"
      },
      {
        title: "Image Zoom on Hover",
        description: "Add a smooth zoom effect to product images when customers hover over them.",
        html: "<div class=\"image-zoom-container\">\n  <img src=\"product-image.jpg\" alt=\"Product\" class=\"zoom-image\">\n</div>",
        css: ".image-zoom-container {\n  overflow: hidden;\n  position: relative;\n}\n\n.zoom-image {\n  transition: transform 0.5s ease;\n  width: 100%;\n  display: block;\n}\n\n.image-zoom-container:hover .zoom-image {\n  transform: scale(1.5);\n}",
        javascript: "// No JavaScript required for basic zoom functionality.\n// This effect is achieved purely with CSS transitions.\n\n// For a more advanced zoom with lens effect:\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const zoomContainers = document.querySelectorAll('.image-zoom-container');\n  \n  zoomContainers.forEach(container => {\n    const img = container.querySelector('.zoom-image');\n    \n    container.addEventListener('mousemove', function(e) {\n      const { left, top, width, height } = container.getBoundingClientRect();\n      const x = (e.clientX - left) / width;\n      const y = (e.clientY - top) / height;\n      \n      img.style.transformOrigin = `${x * 100}% ${y * 100}%`;\n    });\n  });\n});",
        installation: "<ol class=\"list-decimal list-inside space-y-2\">\n  <li>Add the HTML structure around your product images</li>\n  <li>Add the CSS to your theme's stylesheet</li>\n  <li>For the advanced version with mouse tracking, add the JavaScript to your theme</li>\n</ol>",
        howItWorks: "<p>This snippet uses CSS transitions to create a smooth zoom effect when a user hovers over a product image. The overflow: hidden property on the container ensures that the zoomed image doesn't spill outside its container.</p>\n<p>The advanced version tracks the mouse position to adjust the transform-origin of the image, creating a more natural zoom that focuses on the area where the cursor is positioned.</p>",
        categoryId: 1,
        tags: ["Images", "Product Page", "Hover Effects"],
        compatibility: "All Shopify versions"
      },
      {
        title: "Custom Product Reviews",
        description: "A customizable product review system that integrates with your Shopify store's product pages.",
        html: "<div class=\"product-reviews\">\n  <h3 class=\"reviews-title\">Customer Reviews</h3>\n  <div class=\"reviews-summary\">\n    <div class=\"average-rating\">4.5</div>\n    <div class=\"star-rating\">\n      <!-- Stars here -->\n    </div>\n    <div class=\"review-count\">Based on 42 reviews</div>\n  </div>\n  <div class=\"review-form-container\">\n    <!-- Review form here -->\n  </div>\n  <div class=\"reviews-list\">\n    <!-- Reviews list here -->\n  </div>\n</div>",
        css: ".product-reviews {\n  margin-top: 2rem;\n  padding-top: 1rem;\n  border-top: 1px solid #e2e8f0;\n}\n\n.reviews-title {\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.reviews-summary {\n  display: flex;\n  align-items: center;\n  margin-bottom: 1.5rem;\n}\n\n.average-rating {\n  font-size: 2rem;\n  font-weight: 700;\n  margin-right: 1rem;\n}\n\n.star-rating {\n  color: #f59e0b;\n  margin-right: 1rem;\n}\n\n.review-count {\n  color: #6b7280;\n  font-size: 0.875rem;\n}\n\n.review-form-container {\n  margin-bottom: 2rem;\n  padding: 1.5rem;\n  background-color: #f8fafc;\n  border-radius: 0.5rem;\n}\n\n.reviews-list {\n  display: flex;\n  flex-direction: column;\n  gap: 1.5rem;\n}\n\n.review-item {\n  padding-bottom: 1.5rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.review-header {\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 0.5rem;\n}\n\n.reviewer-name {\n  font-weight: 600;\n}\n\n.review-date {\n  color: #6b7280;\n  font-size: 0.875rem;\n}\n\n.review-rating {\n  color: #f59e0b;\n  margin-bottom: 0.5rem;\n}\n\n.review-content {\n  line-height: 1.5;\n}\n\n.review-form {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.form-group {\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\nlabel {\n  font-weight: 500;\n}\n\ninput, textarea {\n  padding: 0.5rem;\n  border: 1px solid #d1d5db;\n  border-radius: 0.25rem;\n}\n\nbutton.submit-review {\n  background-color: #2563eb;\n  color: white;\n  font-weight: 500;\n  padding: 0.5rem 1rem;\n  border-radius: 0.25rem;\n  cursor: pointer;\n  align-self: flex-start;\n}\n\nbutton.submit-review:hover {\n  background-color: #1d4ed8;\n}",
        javascript: "document.addEventListener('DOMContentLoaded', function() {\n  const productId = document.querySelector('[data-product-id]')?.dataset.productId;\n  \n  if (!productId) return;\n  \n  // Fetch reviews from your backend or a third-party service\n  async function fetchReviews() {\n    try {\n      const response = await fetch(`/apps/product-reviews/api/reviews?product_id=${productId}`);\n      const data = await response.json();\n      renderReviews(data.reviews);\n      updateReviewSummary(data.summary);\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n    }\n  }\n  \n  // Render the reviews in the reviews list\n  function renderReviews(reviews) {\n    const reviewsList = document.querySelector('.reviews-list');\n    if (!reviewsList) return;\n    \n    reviewsList.innerHTML = '';\n    \n    if (reviews.length === 0) {\n      reviewsList.innerHTML = '<p class=\"no-reviews\">Be the first to review this product</p>';\n      return;\n    }\n    \n    reviews.forEach(review => {\n      const reviewHTML = `\n        <div class=\"review-item\">\n          <div class=\"review-header\">\n            <span class=\"reviewer-name\">${review.name}</span>\n            <span class=\"review-date\">${formatDate(review.created_at)}</span>\n          </div>\n          <div class=\"review-rating\">\n            ${generateStars(review.rating)}\n          </div>\n          <div class=\"review-content\">\n            ${review.content}\n          </div>\n        </div>\n      `;\n      \n      reviewsList.insertAdjacentHTML('beforeend', reviewHTML);\n    });\n  }\n  \n  // Update the review summary\n  function updateReviewSummary(summary) {\n    const averageRating = document.querySelector('.average-rating');\n    const starRating = document.querySelector('.star-rating');\n    const reviewCount = document.querySelector('.review-count');\n    \n    if (averageRating) averageRating.textContent = summary.average_rating.toFixed(1);\n    if (starRating) starRating.innerHTML = generateStars(summary.average_rating);\n    if (reviewCount) reviewCount.textContent = `Based on ${summary.total_reviews} review${summary.total_reviews === 1 ? '' : 's'}`;\n  }\n  \n  // Generate star rating HTML\n  function generateStars(rating) {\n    const fullStars = Math.floor(rating);\n    const halfStar = rating % 1 >= 0.5;\n    const emptyStars = 5 - fullStars - (halfStar ? 1 : 0);\n    \n    let starsHTML = '';\n    \n    // Full stars\n    for (let i = 0; i < fullStars; i++) {\n      starsHTML += '<span class=\"star full\">★</span>';\n    }\n    \n    // Half star\n    if (halfStar) {\n      starsHTML += '<span class=\"star half\">★</span>';\n    }\n    \n    // Empty stars\n    for (let i = 0; i < emptyStars; i++) {\n      starsHTML += '<span class=\"star empty\">☆</span>';\n    }\n    \n    return starsHTML;\n  }\n  \n  // Format date to readable format\n  function formatDate(dateString) {\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });\n  }\n  \n  // Handle review form submission\n  const reviewForm = document.querySelector('.review-form');\n  \n  if (reviewForm) {\n    reviewForm.addEventListener('submit', async function(e) {\n      e.preventDefault();\n      \n      const formData = new FormData(reviewForm);\n      const reviewData = {\n        product_id: productId,\n        name: formData.get('name'),\n        email: formData.get('email'),\n        rating: parseInt(formData.get('rating')),\n        content: formData.get('content')\n      };\n      \n      try {\n        const response = await fetch('/apps/product-reviews/api/reviews', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(reviewData)\n        });\n        \n        if (response.ok) {\n          // Reset form and refresh reviews\n          reviewForm.reset();\n          fetchReviews();\n          alert('Thank you for your review!');\n        } else {\n          const error = await response.json();\n          alert(`Error: ${error.message}`);\n        }\n      } catch (error) {\n        console.error('Error submitting review:', error);\n        alert('An error occurred while submitting your review. Please try again.');\n      }\n    });\n  }\n  \n  // Initialize the reviews\n  fetchReviews();\n});",
        installation: "<ol class=\"list-decimal list-inside space-y-2\">\n  <li>Add the HTML to your product template</li>\n  <li>Add the CSS to your theme's stylesheet</li>\n  <li>Add the JavaScript to your theme's scripts</li>\n  <li>Create a backend API to handle reviews (or use a third-party service)</li>\n</ol>",
        howItWorks: "<p>This snippet creates a complete review system for your Shopify product pages:</p>\n<ul class=\"list-disc list-inside space-y-2\">\n  <li>Displays the average rating and total number of reviews</li>\n  <li>Shows individual customer reviews with ratings and comments</li>\n  <li>Provides a form for customers to submit new reviews</li>\n  <li>Handles API interactions to fetch and submit reviews</li>\n</ul>\n<p class=\"mt-4\">You'll need to implement a backend API to store and retrieve the reviews, or you can use a third-party review app and modify this code to work with their API.</p>",
        categoryId: 1,
        tags: ["Reviews", "Product Page", "Customer Feedback"],
        compatibility: "Shopify 2.0+"
      },
      {
        title: "Stock Countdown Timer",
        description: "Add urgency to your product pages with a stock countdown timer that shows remaining inventory.",
        html: "<div class=\"stock-countdown\">\n  <div class=\"stock-message\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" class=\"stock-icon\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n      <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n    </svg>\n    <span class=\"stock-text\">Hurry! Only <span class=\"stock-count\">10</span> left in stock</span>\n  </div>\n  <div class=\"stock-progress\">\n    <div class=\"stock-progress-bar\"></div>\n  </div>\n</div>",
        css: ".stock-countdown {\n  margin: 1rem 0;\n  padding: 0.75rem;\n  border: 1px solid #fee2e2;\n  background-color: #fff1f1;\n  border-radius: 0.25rem;\n}\n\n.stock-message {\n  display: flex;\n  align-items: center;\n  margin-bottom: 0.5rem;\n  color: #b91c1c;\n}\n\n.stock-icon {\n  width: 1.25rem;\n  height: 1.25rem;\n  margin-right: 0.5rem;\n}\n\n.stock-text {\n  font-size: 0.875rem;\n  font-weight: 500;\n}\n\n.stock-count {\n  font-weight: 700;\n}\n\n.stock-progress {\n  height: 0.5rem;\n  background-color: #fecaca;\n  border-radius: 9999px;\n  overflow: hidden;\n}\n\n.stock-progress-bar {\n  height: 100%;\n  background-color: #ef4444;\n  border-radius: 9999px;\n  transition: width 0.3s ease;\n}",
        javascript: "document.addEventListener('DOMContentLoaded', function() {\n  // Get product variant ID and fetch inventory\n  const variantSelector = document.querySelector('select[name=\"id\"]') || document.querySelector('input[name=\"id\"][type=\"hidden\"]');\n  \n  if (!variantSelector) return;\n  \n  let currentVariantId = variantSelector.value;\n  \n  // Set initial stock level\n  updateStockCountdown(currentVariantId);\n  \n  // Listen for variant changes\n  if (variantSelector.tagName === 'SELECT') {\n    variantSelector.addEventListener('change', function() {\n      currentVariantId = this.value;\n      updateStockCountdown(currentVariantId);\n    });\n  }\n  \n  // If using radio buttons for variants\n  const variantRadios = document.querySelectorAll('input[name=\"id\"][type=\"radio\"]');\n  variantRadios.forEach(radio => {\n    radio.addEventListener('change', function() {\n      if (this.checked) {\n        currentVariantId = this.value;\n        updateStockCountdown(currentVariantId);\n      }\n    });\n  });\n  \n  // Function to update the stock countdown\n  async function updateStockCountdown(variantId) {\n    try {\n      // Fetch the inventory level from your Shopify store\n      // In a real implementation, you would get this from a custom endpoint\n      // that accesses your Shopify inventory data\n      const response = await fetch(`/apps/inventory/api/variants/${variantId}`);\n      const data = await response.json();\n      \n      const stockCount = data.inventory_quantity;\n      const stockCountElement = document.querySelector('.stock-count');\n      const stockProgressBar = document.querySelector('.stock-progress-bar');\n      const stockCountdown = document.querySelector('.stock-countdown');\n      \n      // Only show for low stock items (e.g., less than 20)\n      if (stockCount > 20) {\n        stockCountdown.style.display = 'none';\n        return;\n      }\n      \n      stockCountdown.style.display = 'block';\n      \n      if (stockCountElement) stockCountElement.textContent = stockCount;\n      \n      // Calculate progress bar width (e.g., if max is 20)\n      const maxStock = 20;\n      const progressPercentage = (stockCount / maxStock) * 100;\n      if (stockProgressBar) stockProgressBar.style.width = `${progressPercentage}%`;\n      \n      // Change message color based on urgency\n      if (stockCount <= 5) {\n        stockCountdown.className = 'stock-countdown urgent';\n      } else if (stockCount <= 10) {\n        stockCountdown.className = 'stock-countdown warning';\n      } else {\n        stockCountdown.className = 'stock-countdown';\n      }\n      \n    } catch (error) {\n      console.error('Error fetching inventory:', error);\n      // Hide the countdown if there's an error\n      const stockCountdown = document.querySelector('.stock-countdown');\n      if (stockCountdown) stockCountdown.style.display = 'none';\n    }\n  }\n});",
        installation: "<ol class=\"list-decimal list-inside space-y-2\">\n  <li>Add the HTML to your product template near the Add to Cart button</li>\n  <li>Add the CSS to your theme's stylesheet</li>\n  <li>Add the JavaScript to your theme's scripts</li>\n  <li>Create a backend endpoint to provide inventory data (or use Shopify's Ajax API)</li>\n</ol>",
        howItWorks: "<p>This snippet creates a visually appealing stock countdown that:</p>\n<ul class=\"list-disc list-inside space-y-2\">\n  <li>Displays the current inventory level for the selected variant</li>\n  <li>Shows a progress bar representing the remaining stock</li>\n  <li>Updates when the customer selects a different variant</li>\n  <li>Creates urgency by highlighting low stock levels</li>\n</ul>\n<p class=\"mt-4\">The script fetches inventory data from your Shopify store and displays it only when stock is below a certain threshold (20 in this example). This creates a sense of urgency that can increase conversion rates.</p>",
        categoryId: 1,
        tags: ["Product Page", "Urgency", "Inventory"],
        compatibility: "All Shopify versions"
      },
      {
        title: "Ajax Cart Drawer",
        description: "A sliding cart drawer that updates in real-time without page refreshes when products are added to cart.",
        html: "<div class=\"cart-drawer\" id=\"cartDrawer\">\n  <div class=\"cart-drawer-header\">\n    <h2 class=\"cart-drawer-title\">Your Cart</h2>\n    <button class=\"cart-drawer-close\" aria-label=\"Close cart\">&times;</button>\n  </div>\n  <div class=\"cart-drawer-items\">\n    <!-- Cart items will be inserted here -->\n  </div>\n  <div class=\"cart-drawer-footer\">\n    <div class=\"cart-drawer-subtotal\">\n      <span>Subtotal:</span>\n      <span class=\"cart-subtotal-price\">$0.00</span>\n    </div>\n    <a href=\"/cart\" class=\"cart-drawer-button cart-button\">View Cart</a>\n    <a href=\"/checkout\" class=\"cart-drawer-button checkout-button\">Checkout</a>\n  </div>\n</div>\n\n<div class=\"cart-drawer-overlay\" id=\"cartDrawerOverlay\"></div>",
        css: ".cart-drawer {\n  position: fixed;\n  top: 0;\n  right: 0;\n  width: 350px;\n  max-width: 90vw;\n  height: 100vh;\n  background: white;\n  box-shadow: -2px 0 10px rgba(0, 0, 0, 0.1);\n  z-index: 1000;\n  transform: translateX(100%);\n  transition: transform 0.3s ease;\n  display: flex;\n  flex-direction: column;\n}\n\n.cart-drawer.active {\n  transform: translateX(0);\n}\n\n.cart-drawer-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(0, 0, 0, 0.5);\n  z-index: 999;\n  opacity: 0;\n  visibility: hidden;\n  transition: opacity 0.3s ease, visibility 0.3s;\n}\n\n.cart-drawer-overlay.active {\n  opacity: 1;\n  visibility: visible;\n}\n\n.cart-drawer-header {\n  padding: 1rem;\n  border-bottom: 1px solid #e2e8f0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.cart-drawer-title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin: 0;\n}\n\n.cart-drawer-close {\n  background: none;\n  border: none;\n  font-size: 1.5rem;\n  cursor: pointer;\n  padding: 0;\n  line-height: 1;\n}\n\n.cart-drawer-items {\n  flex-grow: 1;\n  overflow-y: auto;\n  padding: 1rem;\n}\n\n.cart-item {\n  display: flex;\n  margin-bottom: 1rem;\n  padding-bottom: 1rem;\n  border-bottom: 1px solid #e2e8f0;\n}\n\n.cart-item-image {\n  width: 80px;\n  height: 80px;\n  object-fit: cover;\n  margin-right: 1rem;\n}\n\n.cart-item-details {\n  flex-grow: 1;\n}\n\n.cart-item-title {\n  font-weight: 500;\n  margin: 0 0 0.5rem 0;\n}\n\n.cart-item-variant {\n  font-size: 0.875rem;\n  color: #64748b;\n  margin: 0 0 0.5rem 0;\n}\n\n.cart-item-price {\n  font-weight: 500;\n  margin: 0;\n}\n\n.cart-item-quantity {\n  display: flex;\n  align-items: center;\n  margin-top: 0.5rem;\n}\n\n.quantity-button {\n  background: #f1f5f9;\n  border: none;\n  width: 24px;\n  height: 24px;\n  border-radius: 4px;\n  font-weight: bold;\n  cursor: pointer;\n}\n\n.quantity-input {\n  width: 40px;\n  text-align: center;\n  border: 1px solid #e2e8f0;\n  margin: 0 0.5rem;\n}\n\n.cart-item-remove {\n  background: none;\n  border: none;\n  color: #94a3b8;\n  font-size: 0.875rem;\n  padding: 0;\n  cursor: pointer;\n  margin-top: 0.5rem;\n}\n\n.cart-drawer-footer {\n  padding: 1rem;\n  border-top: 1px solid #e2e8f0;\n}\n\n.cart-drawer-subtotal {\n  display: flex;\n  justify-content: space-between;\n  font-weight: 600;\n  margin-bottom: 1rem;\n}\n\n.cart-drawer-button {\n  display: block;\n  width: 100%;\n  padding: 0.75rem;\n  text-align: center;\n  border-radius: 0.25rem;\n  font-weight: 500;\n  margin-bottom: 0.5rem;\n  text-decoration: none;\n}\n\n.cart-button {\n  background: #f1f5f9;\n  color: #0f172a;\n  border: 1px solid #e2e8f0;\n}\n\n.checkout-button {\n  background: #2563eb;\n  color: white;\n}\n\n.empty-cart-message {\n  text-align: center;\n  padding: 2rem;\n  color: #64748b;\n}",
        javascript: "document.addEventListener('DOMContentLoaded', function() {\n  // Initialize the cart drawer\n  initCartDrawer();\n  \n  // Setup event listeners for add to cart buttons\n  setupAddToCartListeners();\n  \n  function initCartDrawer() {\n    // Create cart drawer elements if they don't exist\n    if (!document.getElementById('cartDrawer')) {\n      const drawerHTML = `\n        <div class=\"cart-drawer\" id=\"cartDrawer\">\n          <div class=\"cart-drawer-header\">\n            <h2 class=\"cart-drawer-title\">Your Cart</h2>\n            <button class=\"cart-drawer-close\" aria-label=\"Close cart\">&times;</button>\n          </div>\n          <div class=\"cart-drawer-items\">\n            <!-- Cart items will be inserted here -->\n          </div>\n          <div class=\"cart-drawer-footer\">\n            <div class=\"cart-drawer-subtotal\">\n              <span>Subtotal:</span>\n              <span class=\"cart-subtotal-price\">$0.00</span>\n            </div>\n            <a href=\"/cart\" class=\"cart-drawer-button cart-button\">View Cart</a>\n            <a href=\"/checkout\" class=\"cart-drawer-button checkout-button\">Checkout</a>\n          </div>\n        </div>\n        <div class=\"cart-drawer-overlay\" id=\"cartDrawerOverlay\"></div>\n      `;\n      \n      document.body.insertAdjacentHTML('beforeend', drawerHTML);\n    }\n    \n    // Add event listeners for drawer open/close\n    const cartDrawer = document.getElementById('cartDrawer');\n    const cartOverlay = document.getElementById('cartDrawerOverlay');\n    const closeBtn = document.querySelector('.cart-drawer-close');\n    const cartButtons = document.querySelectorAll('.cart-icon, .view-cart-button');\n    \n    cartButtons.forEach(button => {\n      button.addEventListener('click', function(e) {\n        e.preventDefault();\n        openCartDrawer();\n      });\n    });\n    \n    closeBtn.addEventListener('click', closeCartDrawer);\n    cartOverlay.addEventListener('click', closeCartDrawer);\n    \n    // Initial cart load\n    updateCart();\n  }\n  \n  function setupAddToCartListeners() {\n    const addToCartForms = document.querySelectorAll('form[action=\"/cart/add\"]');\n    \n    addToCartForms.forEach(form => {\n      form.addEventListener('submit', function(e) {\n        e.preventDefault();\n        \n        const submitButton = form.querySelector('[type=\"submit\"]');\n        const originalBtnText = submitButton.innerHTML;\n        submitButton.innerHTML = 'Adding...';\n        submitButton.disabled = true;\n        \n        // Ajax add to cart\n        fetch('/cart/add.js', {\n          method: 'POST',\n          credentials: 'same-origin',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'X-Requested-With': 'XMLHttpRequest'\n          },\n          body: new URLSearchParams(new FormData(form))\n        })\n        .then(response => response.json())\n        .then(item => {\n          submitButton.innerHTML = originalBtnText;\n          submitButton.disabled = false;\n          \n          // Update cart and open drawer\n          updateCart(true);\n        })\n        .catch(error => {\n          console.error('Error:', error);\n          submitButton.innerHTML = originalBtnText;\n          submitButton.disabled = false;\n          alert('There was an error adding this item to your cart. Please try again.');\n        });\n      });\n    });\n  }\n  \n  function openCartDrawer() {\n    const cartDrawer = document.getElementById('cartDrawer');\n    const cartOverlay = document.getElementById('cartDrawerOverlay');\n    \n    cartDrawer.classList.add('active');\n    cartOverlay.classList.add('active');\n    document.body.style.overflow = 'hidden';\n  }\n  \n  function closeCartDrawer() {\n    const cartDrawer = document.getElementById('cartDrawer');\n    const cartOverlay = document.getElementById('cartDrawerOverlay');\n    \n    cartDrawer.classList.remove('active');\n    cartOverlay.classList.remove('active');\n    document.body.style.overflow = '';\n  }\n  \n  function updateCart(openDrawer = false) {\n    fetch('/cart.js')\n      .then(response => response.json())\n      .then(cart => {\n        updateCartDrawerContents(cart);\n        updateCartCount(cart.item_count);\n        \n        if (openDrawer) {\n          openCartDrawer();\n        }\n      })\n      .catch(error => console.error('Error fetching cart:', error));\n  }\n  \n  function updateCartDrawerContents(cart) {\n    const cartItemsContainer = document.querySelector('.cart-drawer-items');\n    const subtotalElement = document.querySelector('.cart-subtotal-price');\n    \n    // Update subtotal\n    subtotalElement.textContent = formatMoney(cart.total_price);\n    \n    // Clear existing items\n    cartItemsContainer.innerHTML = '';\n    \n    // If cart is empty\n    if (cart.items.length === 0) {\n      cartItemsContainer.innerHTML = '<div class=\"empty-cart-message\">Your cart is empty</div>';\n      return;\n    }\n    \n    // Add each item to the drawer\n    cart.items.forEach(item => {\n      const itemHTML = `\n        <div class=\"cart-item\" data-variant-id=\"${item.variant_id}\">\n          <img class=\"cart-item-image\" src=\"${item.image || '//cdn.shopify.com/s/assets/no-image-2048-5e88c1b20e087fb7bbe9a3771824e743c244f437e4f8ba93bbf7b11b53f7824c.gif'}\" alt=\"${item.title}\">\n          <div class=\"cart-item-details\">\n            <h3 class=\"cart-item-title\">${item.product_title}</h3>\n            ${item.variant_title ? `<p class=\"cart-item-variant\">${item.variant_title}</p>` : ''}\n            <p class=\"cart-item-price\">${formatMoney(item.line_price)}</p>\n            <div class=\"cart-item-quantity\">\n              <button class=\"quantity-button decrease-quantity\" data-line=\"${item.line}\" data-variant-id=\"${item.variant_id}\">-</button>\n              <input type=\"number\" class=\"quantity-input\" value=\"${item.quantity}\" min=\"1\" data-line=\"${item.line}\" data-variant-id=\"${item.variant_id}\">\n              <button class=\"quantity-button increase-quantity\" data-line=\"${item.line}\" data-variant-id=\"${item.variant_id}\">+</button>\n            </div>\n            <button class=\"cart-item-remove\" data-variant-id=\"${item.variant_id}\">Remove</button>\n          </div>\n        </div>\n      `;\n      \n      cartItemsContainer.insertAdjacentHTML('beforeend', itemHTML);\n    });\n    \n    // Add event listeners for quantity buttons and remove buttons\n    setupCartItemListeners();\n  }\n  \n  function setupCartItemListeners() {\n    // Quantity increase buttons\n    document.querySelectorAll('.increase-quantity').forEach(button => {\n      button.addEventListener('click', function() {\n        const input = this.parentNode.querySelector('.quantity-input');\n        const newQuantity = parseInt(input.value) + 1;\n        updateItemQuantity(this.dataset.variantId, newQuantity);\n      });\n    });\n    \n    // Quantity decrease buttons\n    document.querySelectorAll('.decrease-quantity').forEach(button => {\n      button.addEventListener('click', function() {\n        const input = this.parentNode.querySelector('.quantity-input');\n        const newQuantity = parseInt(input.value) - 1;\n        if (newQuantity > 0) {\n          updateItemQuantity(this.dataset.variantId, newQuantity);\n        } else {\n          removeItem(this.dataset.variantId);\n        }\n      });\n    });\n    \n    // Quantity input changes\n    document.querySelectorAll('.quantity-input').forEach(input => {\n      input.addEventListener('change', function() {\n        const newQuantity = parseInt(this.value);\n        if (newQuantity > 0) {\n          updateItemQuantity(this.dataset.variantId, newQuantity);\n        } else {\n          this.value = 1;\n          updateItemQuantity(this.dataset.variantId, 1);\n        }\n      });\n    });\n    \n    // Remove buttons\n    document.querySelectorAll('.cart-item-remove').forEach(button => {\n      button.addEventListener('click', function() {\n        removeItem(this.dataset.variantId);\n      });\n    });\n  }\n  \n  function updateItemQuantity(variantId, quantity) {\n    fetch('/cart/change.js', {\n      method: 'POST',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json',\n        'X-Requested-With': 'XMLHttpRequest'\n      },\n      body: JSON.stringify({\n        id: variantId,\n        quantity: quantity\n      })\n    })\n    .then(response => response.json())\n    .then(cart => {\n      updateCartDrawerContents(cart);\n      updateCartCount(cart.item_count);\n    })\n    .catch(error => console.error('Error updating quantity:', error));\n  }\n  \n  function removeItem(variantId) {\n    updateItemQuantity(variantId, 0);\n  }\n  \n  function updateCartCount(count) {\n    const cartCountElements = document.querySelectorAll('.cart-count');\n    cartCountElements.forEach(element => {\n      element.textContent = count;\n      element.classList.add('cart-count-updated');\n      setTimeout(() => {\n        element.classList.remove('cart-count-updated');\n      }, 1000);\n    });\n  }\n  \n  function formatMoney(cents) {\n    return '$' + (cents / 100).toFixed(2);\n  }\n});",
        installation: "<ol class=\"list-decimal list-inside space-y-2\">\n  <li>Add the JavaScript to your theme's assets folder</li>\n  <li>Add the CSS to your theme's stylesheet</li>\n  <li>Include the script in your theme.liquid file:</li>\n  <pre class=\"mt-2 p-2 bg-white border border-gray-200 rounded text-sm font-mono\">&lt;script src=\"{{ 'cart-drawer.js' | asset_url }}\" defer=\"defer\"&gt;&lt;/script&gt;</pre>\n  <li>Add a cart button or icon with the class <code>cart-icon</code> to open the drawer</li>\n</ol>",
        howItWorks: "<p>This snippet creates a sliding cart drawer that:</p>\n<ul class=\"list-disc list-inside space-y-2\">\n  <li>Captures all \"Add to Cart\" form submissions</li>\n  <li>Sends AJAX requests to add products without page refreshes</li>\n  <li>Updates the cart drawer with the latest cart contents</li>\n  <li>Allows customers to update quantities or remove items directly from the drawer</li>\n  <li>Shows subtotal and provides links to cart and checkout pages</li>\n</ul>\n<p class=\"mt-4\">The drawer is fully responsive and works well on mobile devices. It's designed to enhance the shopping experience by allowing customers to continue shopping without interruptions.</p>",
        categoryId: 3,
        tags: ["Cart", "Ajax", "Drawer"],
        compatibility: "All Shopify versions"
      }
    ];
    
    snippets.forEach(snippet => {
      this.createSnippet(snippet);
    });
  }
}

export const storage = new MemStorage();
